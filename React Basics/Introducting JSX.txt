----------------------------------------------------
JSX produces React “elements”. 
----------------------------------------------------
React doesn’t require using JSX.
----------------------------------------------------
JSX allows React to show more useful error and warning messages.
----------------------------------------------------
You can put any valid JavaScript expression inside the curly braces in JSX.
----------------------------------------------------
Exemple of JSX:
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;
----------------------------------------------------
JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.
----------------------------------------------------
This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions.
Ex: function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}
----------------------------------------------------
You may use quotes to specify string literals as attributes.
Ex: const element = <div tabIndex="0"></div>;
----------------------------------------------------
You can use {} to reference a JS expression on a atribute.
Ex: const element = <img src={user.avatarUrl}></img>;
----------------------------------------------------
You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.
----------------------------------------------------
If a tag is empty, you may close it immediately with />, like XML:
	const element = <img src={user.avatarUrl} />;
----------------------------------------------------
Tags can contain children.
Ex: const element = (
  <div>
    <h1>Hello!</h1>
    <h2>Good to see you here.</h2>
  </div>
);
----------------------------------------------------
It is safe to embed (embutir) user input in JSX.
Ex: const title = response.potentiallyMaliciousInput;
// This is safe:
const element = <h1>{title}</h1>;
----------------------------------------------------
By default, React DOM escapes any values embedded in JSX before rendering them. This helps prevent XSS (cross-site-scripting) attacks.
----------------------------------------------------
Babel compiles JSX down to React.createElement() calls.
----------------------------------------------------
These two examples are identical:

	const element = (
	  <h1 className="greeting">
 	   Hello, world!
 	 </h1>
	);
	
	const element = React.createElement(
	  'h1',
  	{className: 'greeting'},
  	'Hello, world!'
	);
----------------------------------------------------
React.createElement() performs a few checks to help you write bug-free code.
But it creates a code like this: // Note: this structure is simplified
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};
----------------------------------------------------
React Elements are descriptions of what you want to see on the screen.
----------------------------------------------------