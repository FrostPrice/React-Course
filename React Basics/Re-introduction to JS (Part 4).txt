----------------------------------------------------
The || and && operators will execute their second operad is depending on the first. 
----------------------------------------------------
That can be used to find a null object without seen their properties.
Ex: var name = o && o.getName();
----------------------------------------------------
And caching values too, when it's invalid is falsy.
Ex: var name = cachedName || (cachedName = getName());
----------------------------------------------------
It also has an operator formed by 3 words for conditional expressions.
Ex: var allowed = (age > 18) ? 'yes' : 'no';
----------------------------------------------------
Switch is used for multiple branches based on a number or string.
Ex: switch (action) {
  case 'draw':
    drawIt();
    break;
  case 'eat':
    eatIt();
    break;
  default:
    doNothing();
}
----------------------------------------------------
Without a break statement, execution will "fall through" to the next level.
----------------------------------------------------
Objects can be thought of as simple collections of name-value pairs.
Ex: var obj = new Object();          or          var obj = {};
----------------------------------------------------
Exemple of an object literal sintax:
var obj = {
  name: 'Carrot',
  for: 'Max', // 'for' is a reserved word, use '_for' instead.
  details: {
    color: 'orange',
    size: 12
  }
};
----------------------------------------------------
Atribute acess can be chained together.
Ex: obj.details.color; // orange
obj['details']['size']; // 12
----------------------------------------------------
Once created, an object's properties can again be accessed in one of two ways:
// dot notation
obj.name = 'Simon';
var name = obj.name;
----------------------------------------------------
Using a string ("") let you use reserved words.
Ex: obj.for = 'Simon'; // Syntax error, because 'for' is a reserved word
obj['for'] = 'Simon'; // works fine
----------------------------------------------------
Arrays works the same as an object, but they have a special function called Length.
Ex: var a = new Array();
a[0] = 'dog';
a[1] = 'cat';
a[2] = 'hen';
a.length; // 3
----------------------------------------------------
A more convinient way is to use a literal Array.
Ex: var a = ['dog', 'cat', 'hen'];
a.length; // 3
----------------------------------------------------
Array.length is not the numbers of items in the array, it is the highest index.
Ex: 
----------------------------------------------------
You can iterate over an array using the following for loop.
Ex: for (var i = 0; i < a.length; i++) {
  // Do something with a[i]
}
----------------------------------------------------
The for...of statement creates a loop iterating over iterable objects.
Ex: for (const currentValue of a) {
  // Do something with currentValue
}
----------------------------------------------------
The for...in statement iterates over all enumerable properties of an object that are keyed by strings.
Ex: ['dog', 'cat', 'hen'].forEach(function(currentValue, index, array) {
  // Do something with currentValue or array[index]
});
----------------------------------------------------
The forEach() method executes a provided function once for each array element.
----------------------------------------------------