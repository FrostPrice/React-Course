----------------------------------------------------
If you want to allow people to take a ref to your function component, you can use forwardRef or you 
can convert the component to a class.
----------------------------------------------------
You can use the ref attribute inside a function component as long as you refer to a DOM element or a class component.
Ex: function CustomTextInput(props) {
  // textInput must be declared here so the ref can refer to it
  const textInput = useRef(null);
  
  function handleClick() {
    textInput.current.focus();
  }

  return (
    <div>
      <input
        type="text"
        ref={textInput} />
      <input
        type="button"
        value="Focus the text input"
        onClick={handleClick}
      />
    </div>
  );
}
----------------------------------------------------
Ref forwarding lets components opt into exposing any child component’s ref as their own.
----------------------------------------------------
When possible, we advise against exposing DOM nodes, but it can be a useful escape hatch.
----------------------------------------------------
findDOMNode is an escape hatch used to access the underlying DOM node. 
----------------------------------------------------
Callback refs gives more fine-grain control over when refs are set and unset.
----------------------------------------------------
Instead of passing a ref attribute created by createRef(), you pass a function. 
----------------------------------------------------
The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.
Ex: In the file refs and the dom on the site folder.
----------------------------------------------------
React will call the ref callback with the DOM element when the component mounts, and call it with null when it unmounts.
----------------------------------------------------
Refs are guaranteed to be up-to-date before componentDidMount or componentDidUpdate fires.
----------------------------------------------------
You can pass callback refs between components like you can with object refs that were created with React.createRef().
Ex: on the refs and dom file on the site folder.
----------------------------------------------------
String refs have some issues, are considered legacy, and are likely to be removed in one of the future releases.
DON'T USE STRING REFS.
----------------------------------------------------
If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element.
----------------------------------------------------
You can avoid this by defining the ref callback as a bound method on the class, but note that it shouldn’t matter in most cases.
----------------------------------------------------