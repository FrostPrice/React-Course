----------------------------------------------------
It is good to start with a mock, a desing, a simulated object.
----------------------------------------------------
Break The UI Into A Component Hierarchy.
----------------------------------------------------
The first thing you’ll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names.
----------------------------------------------------
A component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.
----------------------------------------------------
Separate your UI into components, where each component matches one piece of your data model.
----------------------------------------------------
Components that appear within another component in the mock should appear as a child in the hierarchy.
Exemple of hierarchy:
	-FilterableProductTable
		-SearchBar
		-ProductTable
			-ProductCategoryRow
			-ProductRow
----------------------------------------------------
Build A Static Version in React.
----------------------------------------------------
The easiest way to implement your app is to build a version that takes your data model and renders the UI but has no interactivity.
----------------------------------------------------
To build a static version of your app that renders your data model, you’ll want to build components that reuse other 
components and pass data using props.
----------------------------------------------------
Props are a way of passing data from parent to child.
----------------------------------------------------
Don’t use state to build this static version.
----------------------------------------------------
You can either start with building the components higher up in the hierarchy or with the ones lower in it.
----------------------------------------------------
The component at the top of the hierarchy will take your data model as a prop.
----------------------------------------------------
React’s one-way data flow (also called one-way binding) keeps everything modular and fast.
----------------------------------------------------
If you make a change to your underlying data model and call ReactDOM.render() again, the UI will be updated.
----------------------------------------------------
Identify The Minimal (but complete) Representation Of UI State.
----------------------------------------------------
To make your UI interactive, you need to be able to trigger changes to your underlying data model and do that with states.
----------------------------------------------------
To build your app correctly, you first need to think of the minimal set of mutable state that your app needs.
----------------------------------------------------
Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand.
----------------------------------------------------
There are a few questions to figure it out wheter you'll use a state:
	-Is it passed in from a parent via props? If so, it probably isn’t state.
	-Does it remain unchanged over time? If so, it probably isn’t state.
	-Can you compute it based on any other state or props in your component? If so, it isn’t state.
----------------------------------------------------